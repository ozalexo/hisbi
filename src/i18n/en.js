/**
 * Copyright 2017–2018, LaborX PTY
 * Licensed under the AGPL Version 3 license.
 */

export default {
  copyright: 'Copyright © 2018 LaborX Pty Ltd. All Rights Reserved.',
  chronobankSite: 'Chronobank.io',
  qa: 'Q&A',
  contactUs: 'Contact Us',
  title: 'EN - English',
  true: 'yes',
  false: 'no',
  tokenNotAvailable: 'Token Not Available',
  ConfirmMnemonic: {
    title: 'Confirm back-up phrase',
    description: 'Click on back-up phrase words in the correct order.',
    startOver: 'Start Over',
    undo: 'Undo',
    done: 'Done',
    back: 'Back',
  },
  CreateAccount: {
    title: 'Create New Account',
    description: 'Created account will be encrypted using given password and stored in your\n            browser\'s local storage.',
    walletName: 'Account name',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    login: 'Create new account',
    or: 'or',
    useAccount: 'Use an existing account',
  },
  RecoverAccount: {
    title: 'Enter mnemonic to reset password',
    word: 'Word',
    resetPassword: 'Reset password',
    or: 'or',
    back: 'Back',
  },
  ResetPassword: {
    title: 'Reset password',
    password: 'Enter New Password',
    confirmPassword: 'Confirm New Password',
    reset: 'Reset',
  },
  LoginForm: {
    title: 'Log In',
    subTitle: 'Welcome back!',
    enterPassword: 'Enter Password',
    submitButton: 'Log In',
    forgotPassword: 'Forgot your password?',
  },
  LoginWithLedger: {
    login: 'Login',
    ethAddress: 'Ethereum address',
    isHttps: {
      successTitle: 'HTTPS protocol provided',
      errorTitle: 'HTTPS protocol only',
      errorTip: 'Ledger works over HTTPS protocol only',
    },
    isU2F: {
      successTitle: 'U2F supported',
      errorTitle: 'U2F is not supported',
      errorTip: 'LedgerWallet uses U2F which is not supported by your browser. Use Chrome, Opera or Firefox with a U2F extension.',
    },
    isETHAppOpened: {
      successTitle: 'Ethereum application found successfully',
      errorTitle: 'Ethereum application is not opened',
      errorTip: 'Open \'Ethereum\' application on your Ledger and set \'Browser Support\' to \'yes\' in \'Settings\'',
    },
    isFetched: {
      successTitle: 'Ethereum address fetched successfully',
      errorTitle: 'Confirm Ethereum address on Ledger',
      errorTip: 'Open Ethereum application and confirm address',
    },
  },
  LoginWithTrezor: {
    title: 'Add an Address',
    login: 'Login',
    or: 'or',
    back: 'back',
    ethAddress: 'Ethereum address',
    enterPath: 'Enter HD derivation path',
    isConnected: {
      successTitle: 'Trezor plugged',
      errorTitle: 'Plug in your device',
      errorTip: 'In order to continue please plug in your Trezor device.',
    },
    isU2F: {
      errorTitle: 'U2F is not supported',
      errorTip: 'TrezorWallet uses U2F which is not supported by your browser. Use Chrome, Opera or Firefox with a U2F extension.',
      successTitle: 'U2F supported',
    },
    isFetched: {
      successTitle: 'Ethereum address fetched successfully',
      errorTitle: 'Confirm Ethereum address on Trezor',
      errorTip: 'Open Ethereum application and confirm address',
    },
    isHttps: {
      successTitle: 'HTTPS protocol provided',
      errorTip: 'Trezor works over HTTPS protocol only',
      errorTitle: 'HTTPS protocol only',
    },
    isETHAppOpened: {
      errorTitle: 'Ethereum application is not opened',
      successTitle: 'Ethereum application found successfully',
      errorTip: 'Open \'Ethereum\' application on your Trezor and set \'Browser Support\' to \'yes\' in \'Settings\'',
    },
  },
  LoginWithMetamask: {
    title: 'Add an Address',
    login: 'Login',
    or: 'or',
    back: 'back',
    ethAddress: 'Ethereum address',
    isConnected: {
      successTitle: 'Trezor plugged',
      errorTitle: 'Plug in your device',
      errorTip: 'In order to continue please plug in your Trezor device.',
    },
  },
  LoginWithMnemonic: {
    title: 'Mnemonic form',
    description: 'Type or copy your mnemonic key into the box below',
    mnemonic: 'Mnemonic',
    submit: 'Submit',
    or: 'or',
    back: '',
    loginWithMnemonic: 'Login with Mnemonic',
    wrongMnemonic: 'Wrong mnemonic',
    generateMnemonic: 'Generate Mnemonic',
    mnemonicKey: 'Mnemonic key',
  },
  LoginWithOptions: {
    mnemonicKey: 'Mnemonic Key',
    walletFile: 'Wallet File',
    privateKey: 'Private Key',
    title: 'Add an Existing Account',
    createAccount: 'Create New Account',
    or: 'or',
    metamask: 'Login to Metamask',
    selectLoginOption: 'Select login option:',
    ledgerNano: 'Ledger Nano Wallet',
    uport: 'Login with uPort',
    trezor: 'Trezor Wallet',
    local: 'Login to TestRPC',
  },
  LoginWithPrivateKey: {
    title: 'Enter a Private Key',
    description: 'Type or copy your private key into the box below',
    privateKey: 'Private key',
    submit: 'Submit',
    or: 'or',
    back: 'back',
    wrongPrivateKey: 'Wrong private key',
    loginWithPrivateKey: 'Login with private key',
  },
  NetworkSelector: {
    network: 'Network',
  },
  LoginWithWallet: {
    title: 'Upload a Wallet File',
    description: 'Upload a wallet file to add the login information to your browser.',
    descriptionExtra: 'We provide the file on New Account Creation.',
    submit: 'Import wallet',
    generateNewWallet: 'Generate New Wallet',
    enterPassword: 'Enter password',
    uploading: 'Uploading',
    uploadWalletFile: 'Upload Wallet File',
    bePatient: 'Be patient, it will take a while...',
    or: 'or',
    back: 'Back',
    login: 'Login',
  },
  BackButton: {
    backTo: {
      options: 'Back to options',
      loginWithMnemonic: 'Back to login with Mnemonic',
      loginWithWallet: 'Back to login with wallet',
    },
    back: 'Back',
  },
  GenerateMnemonic: {
    title: 'Write down back-up phrase',
    description: 'You can use this phrase to login and access your wallet, even if you forgot your password.',
    descriptionExtra: 'You may also print the key which will be provided with a QR code. Use this QR code to scan on phone on ChronoWallet recover page.',
    infoHeader: 'Important! Read the security guidelines',
    infoContentPart1: 'Don\'t share your back-up phrase (mnemonic key) with someone you don\'t trust.',
    infoContentPart2: 'Double check services you\'re giving your mnemonic to and don\'t share your phrase with anyone.',
    infoContentPart3: 'Don\'t loose your back-up phrase (mnemonic key).',
    infoContentPart4: 'We do not store this information and Your account will be lost\n                    together with all your funds and history.',
    proceed: 'Proceed',
    generateMnemonic: 'New mnemonic key generated:',
    iUnderstand: 'I understand',
    warning: 'You need copy this Mnemonic key to access this wallet in the future.',
    'continue': 'Continue',
  },
  GenerateWallet: {
    title: 'Download a Wallet File',
    description: 'You can use this wallet file to add your account available in another browser, for example. The file is protected by the same password as you\'ve created.',
    descriptionExtra: 'The file is protected by the same password as you created before.',
    download: 'Download',
    finish: 'Finish',
    enterPassword: 'Enter password for the new wallet:',
    walletSuccess: 'Your wallet has been generated',
    password: 'Password',
    iUnderstand: 'I understand',
    passwordWarning: 'At least 8 characters',
    'continue': 'Download Wallet',
  },
  Warning: {
    text: 'Keep it safe!  Make a backup!  Don\'t share it with anyone!  Don\'t lose it! It cannot be recovered if you lose it.',
  },
  LoginUPort: {
    login: 'Login',
  },
  AccountSelector: {
    title: 'My Accounts',
    description: 'Browse account stored on your device.',
    descriptionExtra: 'If you have created an account before you may use Add an Existing Account option below.',
    button: 'Add an existing account',
    createAccount: 'Create New Account',
    emptyList: 'Sorry, there are no accounts to display',
    or: 'or',
    selectAddress: 'Select address',
    login: 'Login',
    address: 'Ethereum address',
  },
  NetworkCreateModal: {
    titleAddMode: 'Add a Network',
    titleEditMode: 'Edit a Network',
  },
  NetworkCreateModalForm: {
    address: 'IP address or domain name',
    socket: 'Web socket',
    alias: 'Alias',
    cancel: 'Cancel',
    save: 'Save',
    add: 'Add',
  },
  NetworkDeleteModal: {
    title: 'Delete an Address',
  },
  AccountName: {
    title: 'Account Name',
    description: 'We could not find the provided address.',
    descriptionExtra: 'A new ChronoWallet account will be created with the same password as in provided wallet file.',
    accountNamePlaceholder: 'Enter your account name',
    or: 'or',
    back: 'Back',
    submit: 'Proceed to log in',
  },
  NotFoundPage: {
    pageNotFound: 'The document you\'re trying to access is not found.',
    button: 'Create New Account',
    or: 'or',
    useExistingAccount: 'Use an existing account',
  },
  UserActiveDialog: {
    title: 'Are you here?',
    text: 'Your session will be terminated after ',
    here: 'I\'m here!',
  },
  ActionRequestDeviceDialog: {
    title: 'Action required',
    pleaseConfirm: 'Please confirm the operation on your device.',
    closeAutomatically: 'The window will close automatically upon your confirmation.',
  },
  Timer: {
    sec: 'sec',
  },
  Assets: {
    AssetManager: {
      title: 'Asset manager',
      myPlatforms: 'my platforms',
      managers: 'managers',
      myTokens: 'my tokens',
      addToken: 'add token',
      tokensOnCrowdsale: 'Tokens on crowdsale',
      addNewPlatform: 'add new platform',
    },
    PlatformsList: {
      platform: 'Platform',
      detachPlatform: 'detach platform',
      pending: ' Status: pending',
      loading: 'Loading',
      noTokens: 'no tokens',
    },
    PlatformInfo: {
      reissue: 'Reissue',
      reissueAmount: 'Reissue amount',
      onCrowdsale: 'On crowdsale',
      issuedAmount: 'Issued amount',
      fee: 'fee',
      withoutFee: 'Without fee',
      managers: 'managers',
      revoke: 'Revoke',
      crowdsaleInfo: 'crowdsale info',
      send: 'Send to exchange',
      selectPlatform: 'Select a platform',
      selectToken: 'Select a token',
      createPlatform: 'Create Platform',
      createToken: 'Create Token',
      manageButton: 'Manage (%{size})',
      blockAsset: 'Block asset',
      blacklist: 'Manage Blacklist',
      addManagers: 'Add/edit managers',
    },
    AddPlatformForm: {
      dialogTitle: 'Add platform',
      platformName: 'Platform name',
      platformAddress: 'Platform Address',
      alreadyHave: 'I already have a platform on Ethereum',
    },
    AddTokenForm: {
      dialogTitle: 'Add token',
      platformName: 'Platform',
      tokenSymbol: 'Token symbol',
      smallestUnit: 'Decimals places of smallest unit',
      reissuable: 'Reissuable',
      amount: 'Amount',
      withFee: 'With fee',
      feePercent: 'Fee percent',
      startWithCrowdsale: 'Start with crowdsale',
      description: 'Token full name',
      uploading: 'Uploading',
      choosePlatform: 'Choose platform',
      feeAddress: 'Fee address',
      addNewPlatform: 'Add new platform',
      platformError: 'Choose platform',
      PlatformNotSelected: 'Platform not selected',
    },
    HistoryTable: {
      title: 'History',
      time: 'Time',
      type: 'Type',
      manager: 'Manager',
      value: 'Value',
      token: 'Token',
      added: 'Added',
      deleted: 'Deleted',
      platform: 'Platform',
      user: 'User',
    },
    AssetManagerForm: {
      dialogTitle: 'Add/remove manager',
      managerAddress: 'Manager address',
      addManagersButton: 'Add manager',
    },
    RevokeForm: {
      dialogTitle: 'Revoke token',
      amount: 'amount',
    },
    BlockAssetDialog: {
      dialogTitleBlock: 'Block your asset?',
      dialogTitleUnblock: 'Unblock your asset?',
      dialogSubTitleBlock: 'All asset holders will not be able to make any transactions. Managers will still be able to access. You\'ll be also able to unblock your asset.',
      dialogSubTitleUnblock: 'All asset holders will be able to make any transactions. You\'ll be also able to block your asset.',
      blockAssetButton: 'Block asset',
      unblockAssetButton: 'Unblock asset',
      cancel: 'Cancel',
    },
    BlacklistDialog: {
      dialogTitle: 'Blacklist',
      dialogSubTitle: 'People with addresses listed here will not be able to perform any transactions with your asset.',
      blockAssetButton: 'Block asset',
      unblockAssetButton: 'Block asset',
      cancel: 'Cancel',
    },
    BlacklistForm: {
      addUserButton: 'ADD',
      userAddress: 'Address',
    },
    CrowdsaleForm: {
      minimumValue: 'Minimum value',
      blockLimited: 'Block limited',
      currencyAccepted: 'Currency accepted for payment',
      maximumValue: 'Maximum value',
      startDate: 'Start date',
      confirmAndStart: 'Confirm and start crowdsale',
      crowdsaleType: 'Crowdsale type',
      chooseCurrency: 'Choose currency',
      token: 'Token',
      fundingTarget: 'Funding target',
      exchangeRate: 'Exchange rate',
      startPrice: 'Start price',
      dialogTitle: 'Crowdsale',
      timeLimited: 'Time limited',
      allAvailableCurrencies: 'All Available Currencies',
    },
  },
  UpdateProvideDialog: {
    title: 'Account edit',
    yourName: 'Your Name',
    yourCompany: 'Your Company',
    accountAddress: 'Account Address',
    fileTitle: 'Add/change a profile photo',
    name: 'Name',
    company: 'Company',
    website: 'Website',
    email: 'Email',
    button: 'Confirm Edits',
  },
  OwnersList: {
    you: 'You',
    floatText: 'Enter Owner’s Ethereum address',
    owner: 'Owner #%{index}',
  },
  SignaturesList: {
    ofOwners: 'of %{count} Owner(s)',
  },
  components: {
    TransactionsTable: {
      latestTransactions: 'Latest transactions',
      time: 'Time',
      block: 'Block',
      type: 'Type',
      hash: 'Hash',
      from: 'From',
      to: 'To',
      value: 'Value',
    },
    DepositTokens: {
      depositTime: 'Deposit Time',
      withdraw: 'Withdraw',
      depositAccount: 'Deposit account',
      amount: 'Amount, %{symbol}',
      slow: 'Slow transaction',
      fast: 'Fast',
      yourSymbolBalance: 'Your %{symbol} balance',
      yourDeposit: 'Your deposit',
      holderAllowance: 'holder allowance',
      transactionFee: 'Transaction fee',
      requestTime: 'Request TIME',
      multiplier: ', it is %{multiplier}x of average fee.',
      enterAmount: 'Enter amount greater than 0',
      note: 'Please note.',
      noteText: 'In order deposit you\'ll need to pay two around the same fees.  We\'re informing you about applicable fees on each step. You also will be able to revoke operation, but not the processed fee.',
      noteTwo: 'Your deposit request has been processed. Please set a fee to place funds in your deposit or revoke the operation.',
      noteEth: 'Your Ethereum account has insufficient funds. Please add Ethereum on your account in order to withdraw.',
      noteBalance: 'Your TIME account has insufficient funds. Please add TIME on your account in order to withdraw.',
      buyTime: 'Buy Time',
      receiveEth: 'Receive Eth',
      gasPrice: 'Gas price',
      firstStep: '1. Deposit Amount',
      secondStep: '2. Finish Deposit',
      proceed: 'PROCEED',
      revoke: 'REVOKE',
      finish: 'FINISH',
      depositAmount: 'Amount on deposit',
      balanceAmount: 'Your balance',
      changeAmount: 'Change',
    },
    ReceiveTokenModal: {
      receive: 'Receive',
      important: 'Important!',
      warningText1: 'Make sure you\'re receiving ',
      warningText2: ' to the address provided below. Otherwise it can make the funds loss.',
      receivingTitle: 'Your receiving %{symbol} address',
      qrTitle: 'Your QR code for the %{symbol} address',
      buyTitle: 'Also, you can buy %{symbol} in exchanges',
      error: 'Something wrong.',
    },
    RewardsPeriod: {
      rewardsPeriodIndex: 'Bonus period #%{index}',
      ongoing: 'Ongoing',
      closed: 'Closed',
      startDate: 'Start date',
      inDaysDays: 'in %{days} days',
      endDate: 'End date',
      totalTimeTokensDeposited: 'Total TIME tokens deposited',
      percentOfTotalCount: '%{percent}% of total count',
      uniqueShareholders: 'Unique shareholders',
      yourTimeTokensEligible: 'Your TIME tokens eligible for bonuses in the period',
      percentOfTotalDepositedAmount: '%{percent}% of total deposited amount',
      dividendsAccumulatedForPeriod: 'Dividends accumulated for period',
      yourApproximateRevenueForPeriod: 'Your approximate revenue for period',
    },
    settings: {
      Tokens: {
        tokens: 'Tokens',
        name: 'Name',
        smartContractAddress: 'Smart Contract Address',
        actions: 'Actions',
        addToken: 'Add Token',
      },
      CBEAddresses: {
        cbeAddresses: 'CBE Addresses',
        addCbe: 'Add CBE',
        name: 'Name',
        smartContractAddress: 'Smart Contract Address',
        actions: 'Actions',
        remove: 'Remove',
      },
    },
    dialogs: {
      AddTokenDialog: {
        tokenContractAddress: 'Token contract address',
        tokenName: 'Token name',
        tokenSymbol: 'Token symbol',
        decimalsPlacesOfSmallestUnit: 'Decimals places of smallest unit',
        tokenNameHead: 'Token name',
        tokenAddressHead: 'Token address',
        projectURL: 'Project URL',
        save: 'Save',
        cancel: 'Cancel',
      },
      VoteDialog: {
        chooseOption: 'Choose option',
        ongoing: 'Ongoing',
        timeHoldersAlreadyVoted: 'percent of TIME received',
        published: 'Published',
        endDate: 'End date',
        requiredVotes: 'Required TIME',
        receivedVotes: 'Received TIME',
        variants: 'Variants',
        documents: 'Documents',
        no: 'No',
        daysLeft: 'days left',
        daysLeft_1: 'day left',
        vote: 'Vote',
      },
      OperationsSettingsDialog: {
        operationsSettings: 'Operations Settings',
        cancel: 'Cancel',
        save: 'Save',
      },
      PollEditDialog: {
        voteLimit: 'Vote Limit in TIME per option',
        updatePoll: 'Update Poll',
        finishedDate: 'Finished date',
        createPoll: 'Create Poll',
        editPoll: 'Edit Poll',
        pollTitle: 'Poll title',
        option: 'Option',
        addAttachments: 'Add Attachments',
        newPoll: 'New Poll',
        addOption: 'Add Option',
        pollDescription: 'Poll description',
        optionIndex: 'Option #%{index}',
      },
      PollDetailsDialog: {
        documents: 'Documents',
        no: 'No',
        pollOptions: 'Poll options',
        ongoing: 'Ongoing',
        endDate: 'End date',
        idxNumber: '#%{number}',
        published: 'Published',
        receivedVotes: 'Received TIME',
        timeHoldersAlreadyVoted: 'percent of TIME received',
        requiredVotes: 'Required TIME',
        'new': 'New',
        optionNumber: 'Option #%{number}',
        finished: 'Finished',
        variants: 'Variants',
      },
      AddCurrencyDialog: {
        clickOnThePlusButtonAbove: 'Click on the + plus button above.',
        close: 'Close',
        fillTheForm: 'Fill the form, check values and press SAVE.',
        tokens: 'Tokens',
        howToAddYourToken: 'How to add your token? It\'s easy!',
        allTokens: 'All tokens',
        waitUntilYourToken: 'Wait until your token will be added (mined), select it in the list on the left and press SAVE.',
        addToken: 'Add Token',
        youCanConnectToYourPersonalWallet: 'You can connect to your personal wallet one of the already added tokens or add any other ERC20 token.',
        save: 'Save',
      },
      CBEAddressDialog: {
        addAddress: 'Add Address',
        addCbeAddress: 'Add CBE Address',
        cancel: 'Cancel',
      },
    },
    exchange: {
      ExchangeWidget: {
        middlewareDisconnected: 'The search is not available because Middleware is disconnected',
        token: 'Token',
        emptyList: 'List is empty',
        buy: 'Buy',
        amount: 'Amount',
        exchangeAddress: 'Exchange address',
        exchange: 'Exchange',
        sell: 'Sell',
        search: 'Search',
        createExchange: 'Create an exchange',
      },
      OrdersTable: {
        buyPrice: 'Buy price',
        depositTokens: 'deposit/withdrawal %{symbol}',
        buy: 'Buy',
        depositEth: 'deposit/withdrawal ETH',
        sellPrice: 'Sell price',
        sell: 'Sell',
        sellLimits: 'Sell limits',
        getNextPage: 'Load next page',
        exchangeAddress: 'Exchange address',
        orderBook: 'Order Book',
        statusPending: 'Status: pending',
        buyLimits: 'Buy limits',
        limits: 'Limits',
        price: 'Price',
        showOnlyMyExchanges: 'Configure my exchanges',
      },
      BuyTokensDialog: {
        sendRequest: 'send request',
        needToCreateWallet: 'You need to create %{symbol} wallet',
        price: 'Price',
        amountIn: 'Amount in',
        limits: 'Limits',
        sell: 'Sell',
        traderAddress: 'Trader address',
        approve: 'Approve tokens',
        allowance: 'Your allowance',
        orderBook: 'Order Book',
        buy: 'Buy',
        tradeLimits: 'Trade limits',
        tokens: 'tokens',
        revoke: 'Revoke tokens',
      },
      AddExchangeForm: {
        enterTokenSymbol: 'Enter token symbol',
        availableExchangeBalance: 'Available exchange balance:',
        chooseToken: 'Choose token',
        setThePrices: 'Set the prices:',
        showAllAvailableTokens: 'Show all available tokens',
        sellPrice: 'Sell price (ETH)',
        buyPrice: 'Buy price (ETH)',
        dialogTitle: 'Create an exchange',
        hideAllAvailableTokens: 'Hide all available tokens',
        create: 'Create',
      },
      ExchangeTransferDialog: {
        amountIn: 'Amount in ',
        title: 'Deposit/withdrawal ',
        sendRequest: 'send request',
        withdrawal: 'Withdrawal ',
        deposit: 'Deposit ',
        needToCreateWallet: 'You need to create %{symbol} wallet',
        maxAmount: 'Maximum amount: ',
      },
    },
    dashboard: {
      TransactionsTable: {
        block: 'Block',
        value: 'Value',
        type: 'Type',
        from: 'From',
        latestTransactions: 'Latest transactions',
        hash: 'Hash',
        to: 'To',
        time: 'Time',
      },
      RewardsPeriod: {
        percentOfTotalCount: '%{percent}% of total count',
        yourApproximateRevenueForPeriod: 'Your approximate revenue for period',
        closed: 'Closed',
        uniqueShareholders: 'Unique shareholders',
        startDate: 'Start date',
        endDate: 'End date',
        rewardsPeriodIndex: 'Bonus period #%{index}',
        percentOfTotalDepositedAmount: '%{percent}% of total deposited amount',
        yourTimeTokensEligible: 'Your TIME tokens eligible for bonuses in the period',
        inDaysDays: 'in %{days} days',
        ongoing: 'Ongoing',
        totalTimeTokensDeposited: 'Total TIME tokens deposited',
        dividendsAccumulatedForPeriod: 'Dividends accumulated for period',
      },
      DepositTokens: {
        symbolHolderAllowance: '%{symbol} holder allowance',
        requireTime: 'Require TIME',
        depositTime: 'Deposit TIME',
        yourSymbolBalance: 'Your %{symbol} balance',
        amount: 'Amount',
        withdraw: 'Withdraw',
        yourSymbolDeposit: 'Your %{symbol} deposit',
      },
      Poll: {
        variants: 'Variants',
        finished: 'Finished',
        activate: 'Activate',
        documents: 'Documents',
        'new': 'New',
        timeHoldersAlreadyVoted: 'percent of TIME received',
        vote: 'Vote',
        endDate: 'End Date',
        daysLeft: 'days left',
        requiredVotes: 'Required TIME',
        details: 'Details',
        no: 'No',
        remove: 'Remove',
        published: 'Published',
        ongoing: 'Ongoing',
        endPoll: 'End Poll',
        daysLeft_1: 'day left',
        receivedVotes: 'Received TIME',
      },
    },
    GasSlider: {
      title: 'Transactions Gas price',
      description: 'Set gas price for transactions.',
      slow: 'Slow',
      gasPrice: 'Gas Price: %{multiplier}x of average (%{total} Gwei)',
      fast: 'Fast',
    },
    operations: {
      Operations: {
        settings: 'Settings',
        description: 'Description',
        actions: 'Actions',
        signatures: 'Signatures',
      },
    },
    locs: {
      PageTitle: {
        labourOfferingCompanies: 'Labour Offering Companies',
      },
    },
  },
  TwoFA: {
    formTitle: 'Two–factor authentication',
    introTitle: 'Protect your Wallet by enabling two-factor authentication',
    introContent1: 'Protect your Wallet from unauthorized access by enabling two-factor authentication When two-factor authentication is active you need to enter a one time code every time you login.',
    introContent2: 'We offer mobile based type of two-factor authentication.',
    step1Description: 'Install the authentication app on your phone. Google Authenticator is available on Android, iOS. You can find it from %{googleIcon} Google Play or %{appStoreIcon} App Store.',
    threeStepsTo: '3 steps to',
    enable: 'Enable',
    mobileApp: 'Mobile App',
    based2fa: 'based two-factor authentication',
    iHaveWrittenCode: 'I have written down the backup code on paper',
    step2Description: 'Write down the backup code shown on the page and keep it in a safe place, preferably on paper. It\'s very important that you do this.',
    yourBackupCode: 'Your backup code:',
    step3Description: 'Launch the Google Authenticator app on your smartphone, press Begin Setup. Select Scan Barcode from the mobile app. Scan the barcode shown on this page.',
    step3details: 'To complete the setup, enter the Authentication code from the Google Authenticator',
    authCode: 'Authentication code',
    enable2FA: 'Enable two-factor authentication',
    proceedToActivation: 'Proceed to activation',
  },
  EditSignaturesDialog: {
    dialogTitle: 'Required signatures',
    submit: 'update',
    description: 'Specify number of owners’ signatures to perform transaction.',
  },
  SendTokens: {
    fast: 'Fast',
    slowTransaction: 'Slow transaction',
    balance: 'Balance',
    recipientAddress: 'Recipient address',
    amount: 'Amount',
    transactionFee: 'Transaction fee:',
    basedOnLimit: 'Based on estimated gas limit: ',
    averageFee: '%{multiplier}x of average fee',
    errorFillSatPerBiteField: 'Need to fill SAT/byte field',
    errorCalculationFee: 'Unable to calculate transaction fee at the moment. Try again later',
    errorFillAllFields: 'Need to fill all necessary fields',
    gasPrice: 'Gas Price: %{multiplier} of average (%{total} Gwei)',
    approve: 'Approve',
    revoke: 'Revoke',
    allowance: 'Allowance',
    send: 'Send',
    timeLockedWarn: 'You select Time-locked wallet. Outgoing transfers locked until',
    slow: 'Slow',
    feeRate: 'Fee: %{multiplier} of average (%{total} sat/byte)',
  },
  DepositsList: {
    withdraw: 'withdraw',
    deposit: 'deposit',
  },
  Deposit: {
    title: 'TIME deposit',
    withdraw: 'withdraw',
    deposit: 'deposit',
  },
  TxConfirmations: {
    confirmations: '%{min}m (%{confirmations}/4 Confirms)',
    done: 'Done',
  },
  WalletWidget: {
    sendButton: 'SEND',
    receiveButton: 'RECEIVE',
    depositButton: 'DEPOSIT',
    walletTitle: '%{title} wallets',
    unlockDate: 'Unlocks on ',
    pending: '%{count} pending',
    twoFAWallet: 'My 2FA Wallet',
    sharedWallet: 'My Shared Wallet',
    lockedWallet: 'My Locked Wallet',
    customWallet: 'My custom Wallet',
    additionalStandardWallet: 'My additional standard Wallet',
    standardWallet: 'My Wallet',
    tokensTitle: 'Other positive balance tokens (%{count})',
    tokenNotAvailable: 'Token Not Available',
  },
  WalletWidgetDetail: {
    sendButton: 'SEND',
    receiveButton: 'RECEIVE',
    depositButton: 'DEPOSIT',
    removeButton: 'REMOVE',
    walletTitle: '%{title} wallet',
    tokensTitle: '%{count} tokens',
    ownersTitle: '%{count} Owners',
    pending: '%{count} pending',
    unlockDate: 'Unlocks on ',
    twoFAWallet: 'My 2FA Wallet',
    sharedWallet: 'My Shared Wallet',
    lockedWallet: 'My Locked Wallet',
    customWallet: 'My custom Wallet',
    additionalStandardWallet: 'My additional standard Wallet',
    standardWallet: 'My Wallet',
    tokenNotAvailable: 'Token Not Available',
  },
  TokensListWidget: {
    title: 'Tokens (%{count})',
    more: 'More',
    less: 'Less',
    token: 'Token',
    amount: 'Amount',
    fiat: 'USD',
  },
  PendingTxWidget: {
    title: 'Pending Transactions',
    noTransfers: 'No transfers',
  },
  OwnersListWidget: {
    title: 'Wallet owners',
    signatures: '%{s1} signatures of %{s2} owners required to perform transactions',
  },
  AddWalletWidget: {
    addWallet: 'Add a Wallet',
    btc: 'Bitcoin Wallet',
    dash: 'Dash Wallet',
    ltc: 'Litecoin Wallet',
    eth: 'Ethereum Wallet',
    nem: 'NEM Wallet',
    waves: 'Waves Wallet',
    createWallet: 'Add a new %{blockchain} Wallet',
    multisignatureWallet: 'Multi-signature Wallet',
    timeLockedWallet: 'Time-Locked Wallet',
    customWallet: 'Configure Tokens',
    twoFA: 'Enable 2FA',
    soon: 'Coming soon...',
    st: {
      title: 'Standard Wallet',
      description: ' ',
    },
    tl: {
      title: 'Time Locked',
      description: 'Make this wallet active for transactions on specific date and time.',
    },
    fa: {
      title: '2 Factor Authentication',
      description: 'Protect your Wallet from unauthorized access by enabling two - factor authentication.',
    },
    ms: {
      title: 'Multi - signature',
      description: 'Make the wallet controlled by multiple owners.Advanced',
    },
    cw: {
      title: 'Custom tokens',
      description: 'Make the wallet with ability to add custom tokens.',
    },
  },
  MultisigWalletForm: {
    createNewWallet: 'Create new wallet',
    editWallet: 'Edit wallet',
    walletName: 'Wallet name',
    addOwner: 'Add owner',
    addWallet: 'Create',
    save: 'Save',
    ownerAddress: 'Owner address',
    you: 'You',
    name: 'Wallet name',
    walletOwners: 'Wallet-owners (%{count})',
    walletOwnersDescription: 'Add the wallet owners below.',
    walletOwners2FADescription: 'Disable 2FA in order to specify the wallet owners',
    enterAddress: 'Enter Owner’s Ethereum address',
    requiredSignatures: 'Number of Signatures Required',
    requiredSignaturesDescription: 'Specify number of owners’ signatures required to perform a transaction using the wallet.',
    date: 'Date',
    time: 'Time',
  },
  TimeLockedWalletForm: {
    name: 'Wallet name',
    title: 'Time Lock Settings',
    description: 'Make this wallet active for transactions on specific date and time.',
    date: 'Date',
    time: 'Time',
    addWallet: 'Add wallet',
  },
  WalletSettingsForm: {
    title: 'Wallet Settings',
    name: 'Wallet name',
    setName: 'setName',
  },
  TwoFAWarningWidget: {
    title: 'My 2FA Wallet Case',
    message: 'We\'re enabling 2FA option for your account. This process may take more than 30 seconds. You can leave the page and we will send you a notification once the process is completed.',
    button: 'continue',
  },
  TwoFaWalletForm: {
    title: 'Set transaction fee',
    description: 'Enabling 2FA option for your account requires transaction to be completed. Set the transaction fee and click proceed.',
    proceed: 'proceed',
    slow: 'Slow transaction',
    fast: 'Fast',
    transactionFee: 'Transaction fee:',
    averageFee: '%{multiplier}x of average fee',
    waitTitle: 'We are enabling 2fa for your account',
    waitDescription: 'This process may take more than 30 seconds. You can leave the page and we will send you a notification once the process is completed.',
    goToMyWallets: 'go to my wallets',
    successTitle: '2FA option has been enabled!',
    successDescription: 'Click Proceed button to finalize setup.',
  },
  TwoFaEnableForm: {
    pageTitle: 'Enable 2FA',
    title: 'Download App to enable two-factor authentication',
    description_1: '2FA provides an additional security level for your wallet by generating one-time code in your mobile App for the wallet login and transaction operations.',
    description_2: 'Enable 2FA if you do not plan to have more than 1 owner for the wallet.',
    description_3: 'Install Google Authenticator using the links below. Click Proceed on the form after the app installation.',
    proceed: 'proceed',
    firstStepTitle: 'Write down your backup code',
    firstStepDescription: 'You will need this code to restore App in case of emergencies. We recommend you to store the code on paper and keep it in safe place.',
    secondStepTitle: 'Complete App Setup',
    secondStepDescription: 'Launch Google Authentication App, tap Begin Setup and scan QR code provided below.',
    thirdStepTitle: 'Enter Code',
    thirdStepDescription: 'Enter a code you see in your App.',
    authCode: 'Authentication code',
    confirm: 'I’ve stored the backup code',
    done: 'done',
    confirmCodeWrong: 'Confirmation code incorrect. Please try again',
    successTitle: '2FA success enabled!',
    navigateToWallets: 'go to wallets',
    error: 'Something wrong.',
  },
  TwoFaConfirmModal: {
    title: 'Enter Code',
    description: 'In order to complete the transaction open Google Authenticator and enter a code  provided for your ChronoWallet Account.',
    authCode: 'Authentication code',
    confirm: 'confirm',
    confirmCodeWrong: 'Confirmation code incorrect. Please try again',
  },
  WalletWidgetMini: {
    sendButton: 'SEND',
    receiveButton: 'RECEIVE',
    depositButton: 'DEPOSIT',
    walletTitle: '%{title} wallets',
    unlockDate: 'Unlocks on ',
    tokensCount: '%{count} Tokens',
    pending: '%{count} pending',
    twoFAWallet: 'My 2FA Wallet',
    sharedWallet: 'My Shared Wallet',
    lockedWallet: 'My Locked Wallet',
    customWallet: 'My custom Wallet',
    additionalStandardWallet: 'My additional standard Wallet',
    standardWallet: 'My Wallet',
    tokensTitle: 'Other positive balance tokens (%{count})',
  },
  WalletName: {
    twoFAWallet: 'My 2FA Wallet',
    sharedWallet: 'My Shared Wallet',
    lockedWallet: 'My Locked Wallet',
    customWallet: 'My custom Wallet',
    additionalStandardWallet: 'My additional standard Wallet',
    standardWallet: 'My %{symbol} Wallet',
  },
  DepositWarningWidget: {
    title: 'TIME Deposit',
    message: 'In order to create deposit for your account complete the listed steps below. \nEvery step may take more than 30 seconds to be processed by the network. \nYou can leave the page and we will send you a notification once the processing is completed.',
    button: 'continue',
    step1: 'Set Deposit Allowance for Tokens',
    step2: 'Set Deposit Amount',
  },
  PollEditForm: {
    title: 'Create New Poll',
    editPoll: 'Edit Poll',
    pollTitle: 'Headline',
    pollDescription: 'Description',
    voteLimit: 'Vote Limit in TIME per option',
    finishedDate: 'Date',
    finishedTime: 'Time',
    addAttachments: 'Attach new',
    options: 'Options',
    option: 'Option description',
    optionIndex: 'Option #%{index}',
    updatePoll: 'Update Poll',
    createPoll: 'Create Poll',
    addOption: 'Add Option',
    endPollTitle: 'End Poll by the most voted option',
    endPollDescription: 'Voters will be using their Time deposit value to support a particular option. \nAnd, for example, once ONE of the options will get 100.00 Time limit the poll will be closed automatically. \nSet total amount of Time required for ONE option to auto-finish the poll.',
    limitTitle_1: 'Poll will be closed if',
    limitTitle_2: ' one of the options will get support with amount of ',
    limitTitle_3: '%{value} Time',
    deadlineTitle: 'End Poll Date',
    transactionFeeTitle: 'Transaction Fee',
    transactionFee: 'Transaction Fee: ',
    slow: 'Slow transaction',
    fast: 'Fast',
    averageFee: '%{multiplier}x of average fee.',
    gasPrice: 'Gas price: ',
    countOptions: 'Count of options must be more than 1',
  },
  Poll: {
    'new': 'New',
    draft: 'Draft',
    daysLeft: '%{count} days left',
    timeHoldersAlreadyVoted: 'percent of TIME received',
    no: 'No',
    requiredVotes: 'Required TIME',
    receivedVotes: 'Received TIME',
    variants: 'Variants',
    documents: 'Documents',
    remove: 'Remove',
    details: 'Details',
    endPoll: 'End Poll',
    activate: 'Activate',
    vote: 'Vote',
    published: 'Published',
    endDate: 'End Date',
    processing: 'Processing...',
  },
  PollStatus: {
    'new': 'New',
    draft: 'Draft',
    published: 'Published',
    processing: 'Processing...',
  },
  PublishPollDialog: {
    title: 'Publish this poll?',
    text: 'You\'re about to publish "%{name}" poll and make it visible to a public. Please confirm below.',
    cancel: 'Cancel',
    confirm: 'Confirm',
  },
  VotingWarningWidgets: {
    warning1: 'Deposit TIME on ',
    warning2: 'Deposits page',
    warning3: ', if you want get access to this page.',
    emptyList: 'No votings created',
  },
  TransactionsTable: {
    receiving: 'Receiving from',
    sending: 'Sending to',
    noTransactionsFound: 'No transactions found.',
  },
  TransactionsListWidget: {
    transactions: 'Transactions',
  },
  CustomWalletForm: {
    name: 'Wallet name',
    addWallet: 'Add wallet',
    filter: 'Search tokens',
  },
  StandardWalletForm: {
    title: 'Time Lock Settings',
    description: 'Make this wallet active for transactions on specific date and time.',
    name: 'Wallet name',
    date: 'Date',
    time: 'Time',
    addWallet: 'Add wallet',
  },
  layouts: {
    partials: {
      FooterPartial: {
        download: 'Download',
        subscribe: 'Subscribe',
        enterEmailForNews: 'Enter email for news',
        newsletter: 'Newsletter (coming soon)',
        contactUs: 'Contact us',
        technicalSupport: 'Technical support',
        generalInquiries: 'General inquiries',
        menu: 'Menu',
        socialNetwork: 'Social Network',
      },
      WalletContent: {
        transactions: 'Transactions',
        enterTheAmount: 'Enter the amount you wold like to deposit. You can require TIME once for testing purposes.',
        sendTokens: 'Send tokens',
        checkValuesAndPressSend: 'Check values and press SEND.',
        checkValueAndPress: 'Check value and press APPROVE to allow TIME holder contract to deposit your tokens. This is for your safety.',
        howToMakeATransfer: 'How to make a transfer?',
        ifYouWantToAllowAContract: 'If you want to allow a contract to send your tokens (not ETH) – repeat same but press APPROVE.',
        walletsAreSmartContractsWhichManageAssets: 'Wallets are smart contracts which manage assets and can be owned by multiple accounts. Unlike accounts, contract wallets are controlled by code, which means that it is possible to customize their behavior. The most common use-case are multi-signature wallets, that allow for transaction logging, withdrawal limits, and rule-sets for signatures required.',
        enterTheAddressYouWouldLikeToSendTo: 'Enter the address you would like to send to in the “Recipient address” field.',
        howToMakeTime: 'How to make TIME token deposit?',
        waitUntilAllowance: 'Wait until allowance will be updated and press LOCK. To withdraw enter the amount and press WITHDRAW.',
        youCanUseTheMultisignatureWallets: 'You can use the multisignature wallets',
        ifYouPlanToMoveALargeAmountOfEther: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
        enterTheAmountYouWouldLikeToSend: 'Enter the amount you would like to send.',
        toUseStakeholders: 'To use stakeholders features such as Bonuses and Voting, you should deposit TIME tokens.',
        depositTime: 'Deposit TIME',
      },
      RewardsContent: {
        rewards: 'Bonuses',
        rewardsSmartContractAddress: 'Bonuses smart contract address',
        currentRewardsPeriod: 'Current bonus period',
        periodLength: 'Period length',
        daysDays: '%{days} days',
        accountBonusStatus: 'Your account bonus status',
        enabled: 'Enabled',
        youHaveNoTimeDeposit: 'You have no TIME deposit.',
        pleaseDepositTimeTokens: 'Please deposit TIME tokens to unlock bonuses page.',
        disabled: 'Disabled',
        depositOfWithdrawTime: 'Deposit Or Withdraw Time',
        withdrawRevenue: 'Withdraw Revenue',
        closePeriod: 'Close period',
      },
      VotingContent: {
        voting: 'Voting',
        allPolls: 'All polls',
        completedPolls: 'Completed polls',
        outdatedPolls: 'Outdated polls',
        inactivePolls: 'Inactive polls',
        pollsOngoing: 'Polls ongoing',
        newPoll: 'New Poll',
        ongoingPolls: 'Ongoing Polls',
        pastPolls: 'Past Polls',
        warning3: ', if you want get access this page.',
        warning1: 'Deposit TIME on ',
        warning2: 'Wallet page',
      },
      DrawerMainMenu: {
        logout: 'Logout',
      },
      MenuTokensList: {
        mainAddress: 'My Main Wallet',
        notAvailable: 'Not Available',
        synced: 'Synced: %{network}',
        syncing: 'Syncing: %{network}',
        offline: 'Offline',
        defaultWallet: 'Default wallet address: ',
      },
      MenuTokenMoreInfo: {
        title: 'Token symbol',
        mainWalletTitle: 'My Main Wallet',
        copyAddress: 'Copy Address',
        showQR: 'Show QR Code',
        multisignatureWallet: 'Multisignature Wallet',
        networkTitle: 'Network',
        synced: 'Synced',
        syncing: 'Syncing',
        offline: 'Offline',
      },
      MenuAssetsManagerMoreInfo: {
        title: 'My assets',
        assetPlatform: 'Asset Platform #%{num}',
      },
      NotificationContent: {
        currentTransactions: 'Current transactions',
        systemNotifications: 'System notifications',
        noTransactions: 'No transactions',
        noNotices: 'No notifications',
        newTx: 'New transaction',
        pending: 'Pending...',
        hash: 'Hash',
      },
      ProfileContent: {
        mainAddress: 'Main Address',
      },
      DepositsContent: {
        warning: 'You don\'t have deposit',
      },
      WalletsContent: {},
      AddWalletContent: {},
      PollContent: {
        duration: 'Duration',
        mostPopularOptionReceived: 'Most popular option received',
        of: 'of',
        percent: '(%{num}%)',
        castYourVoteBelow: 'Cast your vote below',
        daysLeft: '%{count} days left',
        descriptionHistory: 'Description History',
      },
      VoteHistoryContent: {
        title: 'Changes History',
        poll: 'Poll: ',
        dismissVote: 'dismiss my vote',
      },
      InfoPartial: {
        addToken: 'Add Token',
        depositTime: 'Deposit TIME',
        sendTokens: 'Send tokens',
        balance: 'Balance',
      },
      OperationsContent: {
        pendingOperations: 'Pending operations',
        completedOperations: 'Completed operations',
      },
      DashboardContent: {
        sendTokens: 'Send tokens',
        depositTime: 'Deposit TIME',
      },
    },
  },
  global: {
    about: 'About',
    labourHours: 'Labour—Hours',
    laborx: 'LaborX',
    team: 'Team',
    faq: 'Q&A',
    blog: 'Blog',
  },
  nav: {
    project: 'ChronoMint',
    deposits: 'Deposits',
    deposit: 'Deposit',
    cbeDashboard: 'CBE Dashboard',
    settings: 'Settings',
    wallet: 'Wallet',
    addWallet: 'Add wallet',
    voting: 'Voting',
    newPoll: 'Create new poll',
    rewards: 'Bonuses',
    assets: 'My assets',
    profile: 'Profile',
    signOut: 'Sign out',
    search: 'Search...',
    actions: 'Actions',
    loadMore: 'Load More',
    markupDashboard: 'Dashboard',
    markupWallet: 'New Wallet',
    newRewards: 'New Bonuses',
    pageNotFound: 'Page not found',
    backToMain: 'Back to main page',
    twoFa: 'Enable 2FA',
    poll: 'Poll',
    exchange: 'Exchange',
    locs: 'LOC Admin',
    lhOperations: 'LH Operations',
    dashboard: 'Dashboard',
    operations: 'Operations',
  },
  common: {
    name: 'Name',
    address: 'Address',
    ethAddress: 'Ethereum Address',
    of: 'of %{count}',
  },
  wallet: {
    modeAdvanced: 'Advanced',
    modeSimple: 'Basic',
    templateName: 'Template name',
    satPerByte: 'SAT / byte',
    gweiPerGas: 'GWEI 0 / gas',
    gasLimit: 'Gas limit',
    sendTokens: 'Send tokens',
    walletName: 'Wallet name',
    recipientAddress: 'Recipient address',
    selectTokenIcon: 'Please select icon file',
    multisignature: 'Multisignature',
    mainWallet: 'Main wallet',
    owners: 'owners',
    youHave: 'You have',
    multisignatureWallets: 'Multisignature wallets',
    createMultisignatureWallet: 'Create multisignature wallet',
    changeMultisignatureWallet: 'Change multisignature wallet',
    switchToMultisignatureWallet: 'Switch to multisignature wallet',
    switchToMainWallet: 'Switch to main wallet',
    pendingTransfers: 'Pending transfers',
    to: 'To',
    transaction: 'Transaction',
    actions: 'Actions',
    value: 'Value',
    revoke: 'Revoke',
    sign: 'Sign',
    enterCode: 'Enter Code',
  },
  terms: {
    account: 'Account',
    amount: 'Amount',
    currency: 'Currency',
    asset: 'Asset',
    hash: 'Hash',
    time: 'Time',
    value: 'Value',
    buying: 'Buying',
    selling: 'Selling',
    block: 'Block',
    action: 'Action',
    balances: 'Balances',
    fee: 'Fee',
    send: 'Send',
    search: 'Search',
    status: 'Status',
    website: 'Website',
    cancel: 'Cancel',
    sendS: 'Send %{s}',
    close: 'Close',
    confirm: 'Confirm',
    save: 'Save',
    view: 'View',
    error: 'Error',
    pending: 'Pending',
    failed: 'Failed',
    remove: 'Remove',
    modify: 'Modify',
  },
  settings: {
    user: {
      title: 'User',
      cbeAddresses: {
        title: 'CBE Addresses',
      },
    },
    erc20: {
      title: 'ERC20 tokens',
      tokens: {
        title: 'Tokens',
        add: 'Add Token',
        modify: 'Modify Token',
        symbol: 'Symbol',
        url: 'Project URL',
        decimals: 'Decimals',
        icon: 'Icon (TODO)',
        errors: {
          invalidAddress: 'Can\'t find valid ERC20 contract by this address',
          addressInUse: 'This address is already in use',
          symbolInUse: 'This symbol is already in use',
          invalidSymbol: 'Symbol can only contain from 2 to 4 A-Z letters',
        },
      },
    },
  },
  notices: {
    'default': {
      approval: {
        title: 'Approval',
        message: '%{amount} %{symbol} approved to transfer for %{contractName} contract',
        details: {
          contractName: 'Contract Name',
          amount: 'Value',
        },
      },
      arbitrary: {
        title: 'Notice',
      },
      error: {
        title: 'Error',
      },
      cbe: {
        added: 'CBE %{address} was added',
        removed: 'CBE %{address} was removed',
      },
      polls: {
        title: 'Polls',
        isCreated: 'Poll created',
        isActivated: 'Poll activated',
        isEnded: 'Poll ended',
        isUpdated: 'Poll updated',
        isRemoved: 'Poll removed',
        isVoted: 'Poll voted',
      },
      transfer: {
        title: 'Transfer',
        receivedFrom: '%{amount} %{symbol} received from %{address}',
        sentTo: '%{amount} %{symbol} sent to %{address}',
        errors: {
          TRANSFER_CANCELLED: 'Cancelled by user from tx confirmation modal',
          TRANSFER_UNKNOWN: 'Unknown transaction error',
        },
      },
      profile: {
        copyIcon: 'Your address has been copied to the clipboard.',
        pkIcon: 'Your private key has been copied to the clipboard.',
        changed: 'Profile has been successfully changed.',
      },
      settings: {
        title: 'Settings',
        erc20: {
          tokens: {
            isAdded: 'Token "%{symbol} – %{name}" was added.',
            isModified: 'Token "%{symbol} – %{name}" was modified.',
            isRemoved: 'Token "%{symbol} – %{name}" was removed.',
          },
        },
      },
      downloads: {
        started: '%{name}: Download started',
        failed: '%{name}: Download failed, check your network connection',
        completed: '%{name}: Download completed',
      },
      wallet: {
        title: 'Wallet',
        create: '%{name}: Created',
      },
      assetsManager: {
        title: 'Assets manager',
        managerAdded: 'Manager added',
        managerRemoved: 'Manager removed',
        assetPaused: 'Asset %{symbol} was blocked',
        assetUnpaused: 'Asset %{symbol} was unblocked',
        userAddedToBlacklist: 'User (%{address}) was added to blacklist',
        userDeletedFromBlacklist: 'User (%{address}) was deleted from blacklist',
      },
    },
    polls: {
      isUpdated: 'Poll updated',
      isRemoved: 'Poll removed',
      title: 'Polls',
      isActivated: 'Poll activated',
      isCreated: 'Poll created',
      isVoted: 'Poll voted',
      isEnded: 'Poll ended',
    },
    wallet: {
      title: 'Wallet',
      create: '%{name}: Created',
    },
    cbe: {
      added: 'CBE %{address} was added',
      removed: 'CBE %{address} was removed',
    },
    locs: {
      updated: '\'%{name}\' was updated.',
      details: {
        amount: 'Amount',
      },
      statusUpdated: '\'%{name}\' status was updated.',
      revoked: '\'%{name}\' redeemed tokens.',
      added: '\'%{name}\' was added.',
      title: 'LOC',
      issued: '\'%{name}\' issued tokens.',
      failed: '\'%{name}\' is failed.',
      removed: '\'%{name}\' was removed.',
    },
    profile: {
      changed: 'Profile has been successfully changed.',
      copyIcon: 'Your address has been copied to the clipboard.',
      pkIcon: 'Your private key has been copied to the clipboard.',
    },
    operations: {
      done: 'Operation complete',
      title: 'Pending Operations',
      details: {
        hash: 'Hash',
        operation: 'Operation',
      },
      cancelled: 'Operation cancelled',
      confirmed: 'Operation confirmed, signatures remained: %{remained}',
      revoked: 'Operation revoked, signatures remained: %{remained}',
    },
    settings: {
      erc20: {
        tokens: {
          isModified: 'Token "%{symbol} – %{name}" was modified.',
          isRemoved: 'Token "%{symbol} – %{name}" was removed.',
          isAdded: 'Token "%{symbol} – %{name}" was added.',
        },
      },
      title: 'Settings',
    },
    approval: {
      message: '%{value} %{symbol} approved to transfer for %{contractName} contract',
      details: {
        contractName: 'Contract Name',
        value: 'Value',
      },
      title: 'Approval',
    },
    transfer: {
      sentTo: '%{value} %{symbol} sent to %{address}',
      errors: {
        TRANSFER_CANCELLED: 'Cancelled by user from tx confirmation modal',
        TRANSFER_UNKNOWN: 'Unknown transaction error',
      },
      title: 'Transfer',
      receivedFrom: '%{value} %{symbol} received from %{address}',
    },
    arbitrary: {
      title: 'Notice',
    },
    downloads: {
      failed: '%{name}: Download failed, check your network connection',
      started: '%{name}: Download started',
      completed: '%{name}: Download completed',
    },
    assetsManager: {
      managerAdded: 'Manager added',
      title: 'Assets manager',
      managerRemoved: 'Manager removed',
    },
    error: {
      title: 'Error',
    },
  },
  tx: {
    title: 'New transaction',
    transfer: 'Transfer',
    from: 'From',
    to: 'To',
    amount: 'Amount',
    transactions: 'Transactions',
    blockNumber: 'Block Number',
    noTransactions: 'No transactions',
    confirm: 'Confirm Transaction',
    fee: 'Fee',
    amountFee: 'Amount+Fee',
    balanceAfter: 'Balance after',
    feeLeft: 'Transaction fee left',
    notEnough: 'Not enough %{symbol}',
    eventType: {
      event: 'event',
      transaction: 'transaction',
    },
    TokenManagementInterface: {
      createAssetWithoutFee: {
        title: 'Confirm create token',
        eventTitle: 'Created token without fee',
      },
      createAssetWithFee: {
        title: 'Confirm create token',
        eventTitle: 'Created token with fee',
      },
    },
    ChronoBankPlatform: {
      reissueAsset: {
        title: 'Confirm reissue tokens',
        eventTitle: 'Reissue asset',
      },
      revokeAsset: {
        title: 'Confirm revoke tokens',
        eventTitle: 'Reissue asset',
      },
      addAssetPartOwner: {
        title: 'Confirm add manager',
        eventTitle: 'Added manager',
      },
      removeAssetPartOwner: {
        title: 'Confirm remove manager',
        eventTitle: 'Removed manager',
      },
    },
    UserManager: {
      addCBE: {
        title: 'Add CBE',
        eventTitle: 'added CBE',
        name: 'Name',
        address: 'Address',
      },
      revokeCBE: {
        title: 'Revoke CBE',
        eventTitle: 'Revoke CBE',
        name: 'Name',
        address: 'Address',
      },
      setRequired: {
        title: 'Set Required Signatures',
        eventTitle: 'Set required signatures',
        _required: 'Quantity',
      },
      setOwnHash: {
        title: 'Update profile',
        eventTitle: 'Updated profile',
        name: 'Name',
        email: 'E-mail',
        company: 'Company',
        tokens: 'Tokens',
      },
      setMemberHash: {
        title: 'Update profile',
        eventTitle: 'Updated profile',
        address: 'Address',
        name: 'Name',
        email: 'Email',
        company: 'Company',
      },
      errors: {
        saveInIPFSError: 'Save data in the IPFS ended with an error, please try again. It`s free.',
        repeatButtonName: 'repeat save in IPFS',
      },
    },
    Ethereum: {
      transfer: {
        title: 'Transfer ETH',
        eventTitle: 'Transfer ETH',
        to: 'Address to',
      },
    },
    General: {
      'default': {
        transfer: {
          title: 'Transfer',
          params: {
            fee: 'Fee',
            feeBalance: 'Fee Balance',
            feeBalanceAfter: 'Fee Balance After',
            operation: 'Operation',
            amount: 'Amount',
            balance: 'Balance',
            balanceAfter: 'Balance After',
            hash: 'Hash',
          },
        },
      },
      transfer: {
        params: {
          balanceAfter: 'Balance After',
          feeBalance: 'Fee Balance',
          hash: 'Hash',
          feeBalanceAfter: 'Fee Balance After',
          amount: 'Amount',
          operation: 'Operation',
          fee: 'Fee',
          balance: 'Balance',
        },
        title: 'Transfer',
      },
    },
    Bitcoin: {
      transfer: {
        title: 'BTC Transfer',
        from: 'From',
        to: 'To',
        amount: 'Amount',
        fee: 'Fee',
      },
      Litecoin: {
        transfer: {
          title: 'LTC Transfer',
        },
      },
      'Bitcoin Cash': {
        transfer: {
          title: 'BCC Transfer',
        },
      },
      Bitcoin: {
        transfer: {
          title: 'BTC Transfer',
        },
      },
      'Bitcoin Gold': {
        transfer: {
          title: 'BTG Transfer',
        },
      },
    },
    'Bitcoin Cash': {
      transfer: {
        title: 'BCC Transfer',
        from: 'From',
        to: 'To',
        amount: 'Amount',
        fee: 'Fee',
      },
    },
    Dash: {
      transfer: {
        title: 'DASH Transfer',
        from: 'From',
        to: 'To',
        amount: 'Amount',
        fee: 'Fee',
      },
    },
    Litecoin: {
      transfer: {
        title: 'LTC Transfer',
        from: 'From',
        to: 'To',
        amount: 'Amount',
        fee: 'Fee',
      },
    },
    nem: {
      transfer: {
        title: 'Nem Transfer',
        from: 'From',
        to: 'To',
        amount: 'Amount',
        fee: 'Fee',
      },
    },
    Waves: {
      'default': {
        transfer: {
          title: 'Waves Transfer',
          from: 'From',
          to: 'To',
          amount: 'Amount',
          fee: 'Fee',
        },
      },
    },
    ContractsManager: {},
    ChronoBankAssetProxy: {
      approve: {
        title: 'Approve TIME',
        eventTitle: 'Approved TIME',
        account: 'Account',
        amount: 'Amount',
      },
      transfer: {
        title: 'Transfer TIME',
        eventTitle: 'Transfer TIME',
        recipient: 'Recipient',
        amount: 'Amount',
      },
    },
    ChronoBankAssetWithFeeProxy: {
      approve: {
        title: 'Approve LHT',
        eventTitle: 'Approved LHT',
        account: 'Account',
        amount: 'Amount',
      },
      transfer: {
        title: 'Transfer LHT',
        eventTitle: 'Transfer LHT',
        recipient: 'Recipient',
        amount: 'Amount',
      },
    },
    PendingManager: {
      confirm: {
        title: 'Confirm Operation',
        eventTitle: 'Confirmed Operation',
      },
      revoke: {
        title: 'Revoke Operation',
        eventTitle: 'Revoked Operation',
      },
    },
    TimeHolder: {
      deposit: {
        title: 'Deposit TIME',
        eventTitle: 'Deposit TIME',
        amount: 'Amount',
      },
      withdrawShares: {
        title: 'Withdraw TIME',
        eventTitle: 'Withdraw TIME',
        amount: 'Amount',
      },
    },
    Rewards: {
      withdrawReward: {
        title: 'Withdraw Bonus',
        eventTitle: 'Withdraw Bonus',
        amount: 'Amount',
      },
      closePeriod: {
        title: 'Close Bonuses Period',
        eventTitle: 'Close Bonuses Period',
      },
    },
    AssetDonator: {
      sendTime: {
        title: 'Require TIME',
        eventTitle: 'Require TIME',
        donation: 'Donation to',
      },
    },
    PlatformsManager: {
      createPlatform: {
        title: 'Confirm create platform',
        eventTitle: 'Created platform',
      },
      attachPlatform: {
        title: 'Confirm attach platform',
        eventTitle: 'Attach platform',
      },
      detachPlatform: {
        title: 'Confirm detach platform',
        eventTitle: 'Detach platform',
      },
    },
    ERC20Manager: {
      setToken: {
        title: 'Modify Token',
        eventTitle: 'Modify Token',
      },
      removeTokenByAddress: {
        title: 'Remove Token',
        eventTitle: 'Remove Token',
      },
      addToken: {
        title: 'Add Token',
        eventTitle: 'Add Token',
      },
      removeToken: {
        title: 'Remove Token',
      },
    },
    ERC20Interface: {
      approve: {
        title: 'Approve to transfer your tokens',
        eventTitle: 'Approved transfer of your tokens',
        spender: 'Spender',
        amount: 'Amount',
        account: 'Account',
      },
      transfer: {
        title: 'Transfer tokens',
        eventTitle: 'Transfer tokens',
        amount: 'Amount',
        account: 'Account',
      },
    },
    Wallet: {
      transfer: {
        title: 'Transfer',
        eventTitle: 'Transfer',
        value: 'Value',
        symbol: 'Symbol',
        to: 'To',
      },
      confirm: {
        title: 'Confirm tx',
        eventTitle: 'Confirm tx',
        value: 'Value',
        symbol: 'Symbol',
      },
      revoke: {
        title: 'Revoke tx',
        eventTitle: 'Revoke tx',
        value: 'Value',
        symbol: 'Symbol',
      },
      addOwner: {
        title: 'Add owner',
        eventTitle: 'Add owner',
        owner: 'New Owner',
      },
      removeOwner: {
        title: 'Remove owner',
        eventTitle: 'Remove owner',
        owner: 'Owner',
      },
      kill: {
        title: 'Kill wallet',
        eventTitle: 'Kill wallet',
        to: 'Transfer tokens to',
      },
      changeRequirement: {
        title: 'Change required signatures',
        eventTitle: 'Change required signatures',
        requiredSignatures: 'New value',
      },
    },
    PollInterface: {
      activatePoll: {
        title: 'Activate poll',
        eventTitle: 'Activate poll',
        pollAddress: 'Poll address',
        from: 'From',
      },
      killPoll: {
        title: 'Remove Poll',
        eventTitle: 'Remove poll',
        pollAddress: 'Poll address',
        from: 'From',
      },
      endPoll: {
        title: 'End Poll',
        eventTitle: 'End poll',
        pollAddress: 'Poll address',
        from: 'From',
      },
      vote: {
        title: 'Vote',
        eventTitle: 'Vote',
        pollAddress: 'Poll address',
        from: 'From',
        choiceNumber: 'Choice number',
      },
    },
    VotingManager: {
      createPoll: {
        modalTitle: 'Create Poll',
        eventTitle: 'Create Poll',
        options: 'Options',
        files: 'Files',
        description: 'Description',
        title: 'Create Poll',
        deadline: 'End Poll Date',
        votelimit: 'End Poll by the most voted option',
      },
    },
    ChronoBankAsset: {
      pause: {
        title: 'Block asset',
        eventTitle: 'Block asset',
      },
      unpause: {
        title: 'Unblock asset',
        eventTitle: 'Unblock asset',
      },
      restrict: {
        title: 'Add user to blacklist',
        eventTitle: 'Added user to blacklist',
      },
      unrestrict: {
        title: 'Remove user from blacklist',
        eventTitle: 'Removed user to blacklist',
      },
    },
    WalletsManager: {
      createWallet: {
        title: 'Create multisignature wallet',
        eventTitle: 'Created multisignature wallet',
        owners: 'Owners',
        requiredSignatures: 'Required signatures',
        releaseTime: 'Release time',
        isTimeLocked: 'Is timeLocked',
      },
      create2FAWallet: {
        title: 'Create 2FA wallet',
        eventTitle: 'Created 2FA wallet',
      },
    },
    LOCManager: {
      reissueAsset: {
        name: 'Name',
        title: 'Issue asset',
        amount: 'Amount',
      },
      setLOC: {
        title: 'Update LOC',
        expDate: 'Expiration Date',
        name: 'Name',
        issueLimit: 'Issue Limit',
        website: 'Website',
        publishedHash: 'Contract',
      },
      addLOC: {
        website: 'Website',
        issueLimit: 'Issue Limit',
        title: 'Add LOC',
        expDate: 'Expiration Date',
        publishedHash: 'Contract',
        name: 'Name',
        currency: 'Currency',
      },
      undefined: {
        name: 'Name',
        status: 'Status',
        title: 'Update LOC status',
      },
      revokeAsset: {
        title: 'Revoke Asset',
        name: 'Name',
        amount: 'Amount',
      },
      removeLOC: {
        title: 'Remove LOC',
        name: 'Name',
      },
      sendAsset: {
        title: 'Send Asset',
      },
    },
    Exchange: {
      withdrawTokens: {
        title: 'Confirm withdraw tokens',
      },
      withdrawEth: {
        title: 'Confirm withdraw ETH',
      },
      buy: {
        title: 'Confirm buy tokens for ETH',
      },
      sell: {
        title: 'Confirm sell tokens for ETH',
      },
    },
    Nem: {
      Xem: {
        transfer: {
          title: 'Xem Transfer',
        },
      },
      Mosaic: {
        transfer: {
          title: 'Mosaic Transfer',
        },
      },
    },
    ExchangeManager: {
      createExchange: {
        title: 'Create an exchange',
      },
    },
  },
  errors: {
    required: 'Required',
    invalidPositiveInt: 'Should be positive integer',
    invalidPositiveNumber: 'Should be positive number',
    invalidPositiveNumberOrZero: 'Should be positive number or zero',
    invalidURL: 'Should be valid URL',
    invalidEmail: 'Should be valid email address',
    invalidLength: 'Should have length more than or equal 3 symbols',
    invalidMaxLength: 'Should have length less than or equal 32 symbols',
    invalidAddress: 'Should be valid %{blockchain} address',
    validIpfsFileList: 'Should be valid file list',
    between: 'Should be between %{min} and %{max}',
    lowerThan: 'Should be lower than %{limit}',
    lowerThanOrEqual: 'Should be lower or equal than %{limit}',
    moreThan: 'Should be more than %{limit}',
    moreThanOrEqual: 'Should be more or equal than %{limit}',
    countMoreThan: 'Count should be more than %{limit}',
    countMoreThanOrEqual: 'Count should be more or equal than %{limit}',
    invalidLatinString: 'String must have only Latin characters (A-z)',
    mustBeUnique: 'Value must be unique',
    invalidConfirm2FACode: 'Should be a 6-digit code',
    cantSentToYourself: 'Can\'t send tokens to yourself',
    notTokens: 'The wallet has insufficient funds',
    platformNotEnoughTokens: 'Platform doesn\'t have enough tokens to sell you',
    invalidCurrencyNumber: 'Should have maximum %{decimals} decimal places',
    greaterThanAllowed: 'Amount is greater than allowed',
    greaterOrEqualBuyPrice: 'Should be greater than or equal buy price',
    fileUploadingError: 'Could\'t upload file',
    alreadyExist: '%{what} already exists',
    transactionErrorTitle: 'Transaction Error',
    transactionErrorMessage: 'There are error while processing for %{item}. Error [%{code}]: %{message}',
    wallet: {
      walletName: {
        haveToBeString: 'Have to be string',
      },
    },
    notEnoughTokens: 'Not enough tokens',
  },
  forms: {
    selectFile: 'Please select a file',
    fileUploading: 'File uploading',
    mustBeCoSigned: 'This operation must be co-signed by other CBE key holders before it is executed.',
    correspondingFee: 'Corresponding fees will be deducted from this amount',
  },
  dialogs: {
    copyAddress: {
      title: 'Copy address',
      controlTitle: 'Address',
      description: 'Press CTRL + C or ⌘ + C to copy address to clipboard',
    },
    copyPrivateKey: {
      title: 'Copy private key',
      controlTitle: 'Private key',
      description: 'Press CTRL + C or ⌘ + C to copy private key to clipboard',
    },
  },
  poll: {
    'new': 'New Poll',
    create: 'Create Poll',
  },
  otherContract: {
    add: 'Add other contract',
  },
  errorCodes: {
    MODIFIER_STOPPED: 'Auth error',
    OK: 'OK',
    UNDEFINED: 'Undefined',
    FRONTEND_UNKNOWN: 'Unknown transaction error.',
    FRONTEND_OUT_OF_GAS: 'Transaction is out of gas.',
    FRONTEND_WEB3_FILTER_FAILED: 'Unknown transaction result due to web3 filter error.',
    FRONTEND_RESULT_FALSE: 'Transaction failed with false result.',
    FRONTEND_RESULT_TRUE: 'Transaction failed with true result.',
    FRONTEND_INVALID_RESULT: 'Transaction invalid result.',
    USER_NOT_FOUND: 'User not found',
    USER_INVALID_PARAMETER: 'User: invalid request parameters',
    USER_ALREADY_CBE: 'User already CBE',
    USER_NOT_CBE: 'User is not CBE',
    USER_SAME_HASH: 'User has the same hash',
    USER_INVALID_REQURED: 'User: Invalid required',
    USER_INVALID_STATE: 'User: Invalid state',
    CROWDFUNDING_INVALID_INVOCATION: 'Crowdfunding: Invalid invocation',
    CROWDFUNDING_ADD_CONTRACT: 'Crowdfunding: add contract',
    CROWDFUNDING_NOT_ASSET_OWNER: 'Crowdfunding: User is not asset owner',
    PENDING_NOT_FOUND: 'Pending not found',
    PENDING_INVALID_INVOCATION: 'Pending Operation: Invalid invocation',
    PENDING_ADD_CONTRACT: 'Pending add contract',
    PENDING_DUPLICATE_TX: 'Duplicate transaction',
    PENDING_CANNOT_CONFIRM: 'Cannot confirm request',
    PENDING_PREVIOUSLY_CONFIRMED: 'Operation already confirmed',
    PENDING_NOT_ENOUGH_CONFIRMED: 'Operation not enough confirmed',
    STORAGE_INVALID_INVOCATION: 'Storage invalid invocation',
    EXCHANGE_INVALID_PARAMETER: 'Exchange: Invalid request parameter',
    EXCHANGE_INVALID_INVOCATION: 'Exchange: Invalid invocation',
    EXCHANGE_INVALID_FEE_PERCENT: 'Exchange: invalid fee percent',
    EXCHANGE_INVALID_PRICE: 'Exchange: invalid price',
    EXCHANGE_MAINTENANCE_MODE: 'Exchange: maintenance mode',
    EXCHANGE_TOO_HIGH_PRICE: 'Exchange: too high price',
    EXCHANGE_TOO_LOW_PRICE: 'Exchange: too low price',
    EXCHANGE_INSUFFICIENT_BALANCE: 'Exchange: insufficient balance',
    EXCHANGE_INSUFFICIENT_ETHER_SUPPLY: 'Exchange: insufficient ether supply',
    EXCHANGE_PAYMENT_FAILED: 'Exchange: payment failed',
    EXCHANGE_TRANSFER_FAILED: 'Exchange: transfer failed',
    EXCHANGE_FEE_TRANSFER_FAILED: 'Exchange: fee transfer failed',
    EXCHANGE_STOCK_NOT_FOUND: 'Exchange: stock not found',
    EXCHANGE_STOCK_INVALID_PARAMETER: 'Exchange: stock invalid parameter',
    EXCHANGE_STOCK_INVALID_INVOCATION: 'Exchange: stock invalid invocation',
    EXCHANGE_STOCK_ADD_CONTRACT: 'Exchange: stock add contract',
    EXCHANGE_STOCK_UNABLE_CREATE_EXCHANGE: 'Exchange: stock unable to create exchange',
    VOTE_INVALID_PARAMETER: 'Vote: invalid parameter',
    VOTE_INVALID_INVOCATION: 'Vote: invalid invocation',
    VOTE_ADD_CONTRACT: 'Vote: add contract',
    VOTE_LIMIT_EXCEEDED: 'Vote: limit exceeded',
    VOTE_POLL_LIMIT_REACHED: 'Vote: poll limit reached',
    VOTE_POLL_WRONG_STATUS: 'Vote: poll wrong status',
    VOTE_POLL_INACTIVE: 'Vote: poll inactive',
    VOTE_POLL_NO_SHARES: 'Vote: poll hasn\'t shares',
    VOTE_POLL_ALREADY_VOTED: 'Vote: poll already voted',
    VOTE_ACTIVE_POLL_LIMIT_REACHED: 'Vote: active poll limit reached',
    VOTE_UNABLE_TO_ACTIVATE_POLL: 'Vote: unable to activate poll',
    REWARD_NOT_FOUND: 'Bonus: not found',
    REWARD_INVALID_PARAMETER: 'Bonus: invalid request parameter',
    REWARD_INVALID_INVOCATION: 'Bonus: invalid invocation',
    REWARD_INVALID_STATE: 'Bonuses: invalid state',
    REWARD_INVALID_PERIOD: 'Bonuses: invalid period',
    REWARD_NO_REWARDS_LEFT: 'Bonuses: no bonuses left',
    REWARD_ASSET_TRANSFER_FAILED: 'Bonus: asset transfer failed',
    REWARD_ALREADY_CALCULATED: 'Bonus: already calculated',
    REWARD_CALCULATION_FAILED: 'Bonus: calculation failed',
    REWARD_CANNOT_CLOSE_PERIOD: 'Bonus: cannot close period',
    REWARD_ASSET_ALREADY_REGISTERED: 'Bonus: asset already registered',
    CONTRACT_EXISTS: 'Contract already exists',
    CONTRACT_NOT_EXISTS: 'Contract not exists',
    TIMEHOLDER_ALREADY_ADDED: 'Timeholder already added',
    TIMEHOLDER_INVALID_INVOCATION: 'Timeholder: invalid invocation',
    TIMEHOLDER_INVALID_STATE: 'Timeholder: invalid state',
    TIMEHOLDER_TRANSFER_FAILED: 'Timeholder: transfer failed',
    TIMEHOLDER_WITHDRAWN_FAILED: 'Timeholder: withdrawn failed',
    TIMEHOLDER_DEPOSIT_FAILED: 'Timeholder: deposit failed',
    TIMEHOLDER_INSUFFICIENT_BALANCE: 'Timeholder: insufficient balance',
    ERCMANAGER_INVALID_INVOCATION: 'ERC20 Manager: invalid invocation',
    ERCMANAGER_INVALID_STATE: 'ERC20 Manager: invalid state',
    ERCMANAGER_TOKEN_SYMBOL_NOT_EXISTS: 'ERC20 Manager: token symbol not exists',
    ERCMANAGER_TOKEN_NOT_EXISTS: 'ERC20 Manager: token not exists',
    ERCMANAGER_TOKEN_SYMBOL_ALREADY_EXISTS: 'ERC20 Manager: token symbol already exists',
    ERCMANAGER_TOKEN_ALREADY_EXISTS: 'ERC20 Manager: token already exists',
    ERCMANAGER_TOKEN_UNCHANGED: 'ERC20 Manager: token unchanged',
    ASSETS_INVALID_INVOCATION: 'Assets: invalid invocation',
    ASSETS_EXISTS: 'Asset already exists',
    ASSETS_TOKEN_EXISTS: 'Assets: token already exists',
    ASSETS_CANNON_CLAIM_PLATFORM_OWNERSHIP: 'Assets: cannot claim platform ownership',
    ASSETS_WRONG_PLATFORM: 'Assets: wrong platform',
    ASSETS_NOT_A_PROXY: 'Assets: not a proxy',
    ASSETS_OWNER_ONLY: 'Assets: owner only',
    ASSETS_CANNOT_ADD_TO_REGISTRY: 'Assets: cannot add to registry',
    LOC_SEND_ASSET: 'LOC send asset',
    LOC_INACTIVE: 'LOC inactive',
    LOC_REQUESTED_ISSUE_VALUE_EXCEEDED: 'LOC requested issue value exceed',
    LOC_SHOULD_NO_BE_ACTIVE: 'LOC Should be active',
    LOC_NOT_FOUND: 'LOC not found',
    LOC_INVALID_INVOCATION: 'LOC invalid invocation',
    LOC_REQUESTED_REVOKE_VALUE_EXCEEDED: 'LOC requested revoke value exceed',
    LOC_INVALID_PARAMETER: 'LOC invalid parameters',
    LOC_REISSUING_ASSET_FAILED: 'LOC reissuing asset failed',
    LOC_REVOKING_ASSET_FAILED: 'LOC revoking asset failed',
    LOC_EXISTS: 'LOC exists',
    LOC_ADD_CONTRACT: 'LOC add contract',
  },
  fileSelect: {
    errors: {},
    attachNew: 'Attach new',
    selectFile: 'Select File',
    filesLimit: '%{files} of %{limit}',
    addAttachments: 'Add attachments',
  },
  networkStatus: {
    online: 'Online',
    offline: 'Offline',
    syncing: 'Syncing',
    synced: 'Synced',
    unknown: 'Fetching status...',
  },
  materialUi: {
    DatePicker: {
      cancelLabel: 'Cancel',
      okLabel: 'OK',
    },
  },
  topButtons: {
    addDeposit: 'Add deposit',
    addWallet: 'Add a wallet',
    addPoll: 'Add a Poll',
    publish: 'Publish',
    endPoll: 'End poll',
    addToken: 'Add a token',
    voteHistory: 'Changes History',
  },
  LoginMetamask: {
    network: 'Network',
    notDefined: 'Not defined',
    wrongMetaMask: 'Something wrong with MetaMask',
  },
  Dashboard: {
    Voting: {
      votingOngoing: 'Voting ongoing',
      finished: 'percent of TIME received',
      allPolls: 'All Polls',
      process: 'Process',
      published: 'Published',
      moreInfo: 'more info',
    },
    Rewards: {
      title: 'Bonuses',
      allPeriods: 'All Periods',
    },
  },
  ProviderSelectorSwitcher: {
    automatic: 'Switch to automatic',
    manual: 'Switch to manual',
  },
  WalletAddEditForm: {
    timeLocked: 'Time Locked',
    walletOwnersDescription: 'Add the wallet owner here.',
    addWallet: 'Add wallet',
    date: 'Date',
    createNewWallet: 'Create new wallet',
    timeLockedDescription: 'Make this wallet active for transactions after specific date and time.',
    walletOwners2FADescription: 'Disable 2FA in order to specify the wallet owners',
    time: 'Time',
    save: 'Save',
    you: 'You',
    requiredSignatures: 'Required signatures',
    walletName: 'Wallet name',
    twoFADescription: 'Coming soon.',
    twoFA: '2 Factor Authentication',
    editWallet: 'Edit wallet',
    ownerAddress: 'Owner address',
    addOwner: 'Add owner',
    enterAddress: 'Enter Owner’s Ethereum address',
    requiredSignaturesDescription: 'Specify number of owners’ signatures to perform transaction.',
    name: 'Name',
    walletOwners: 'Wallet Owners (%{count})',
  },
  WalletSelectDialog: {
    yourWallets: 'Your wallets',
    pending: 'Pending...',
    owners_1: 'Owner',
    youHaveNoWallets: 'You have no wallets',
    pendings: 'Pendings',
    owners_2: 'Owners',
    headerSubtitle: 'Choose, Modify or Create Multisignature Wallets',
    availableFunds: 'Available funds',
    activeWallets: 'Active Wallets',
    numOwners: '%{num} owners',
    selectWallet: 'Select Wallet',
    headerTitle: 'Choose Multisignature Wallet',
    requiredSignatures: 'Signatures req.',
    unlockDate: 'Unlock Date',
    addWallet: 'Add wallet',
    timeLockedWallets: 'Time-locked Wallets',
  },
  locs: {
    redeemS: 'Redeem %{asset}',
    notice: {
      statusUpdated: 'Status updated',
      issued: 'Issued',
      removed: 'Removed',
      added: 'Added',
      revoked: 'Revoked',
      updated: 'Updated',
    },
    allowedToBeIssued: 'Allowed to be issued',
    daysLeft_1: 'day left',
    forms: {
      actions: {
        issued: 'issued',
        redeemed: 'redeemed',
      },
      amountToBeS: 'Amount to be %{action}',
      allowedToBeS: 'Allowed to be %{action} on behalf of %{name}: %{limit} %{currency}',
    },
    issueLHT: 'Issue LHT',
    status: {
      bankrupt: 'Bankrupt',
      inactive: 'Inactive',
      active: 'Active',
      maintenance: 'Maintenance',
      suspended: 'Suspended',
    },
    save: 'Save changes',
    title: 'LOC title',
    entries: '%{number} entries total',
    updateStatus: 'Update Status',
    expirationDate: 'Expiration Date',
    issueS: 'Issue %{asset}',
    create: 'Create LOC',
    editInfo: 'Edit LOC Info',
    sendLHToExchange: 'Send LHT to Exchange',
    issued: 'Issued',
    'new': 'New LOC',
    recent: 'Recent LOCs',
    issueLimit: 'Issue Limit',
    sendToExchange: 'Send to exchange',
    addedOn: 'Added on %{date}',
    edit: 'Edit LOC',
    viewContract: 'View Contact',
    issuanceParameters: 'Issuance parameters',
    'delete': 'Delete LOC',
    uploadedFile: 'Uploaded File',
    daysLeft: 'days left',
    insuranceFee: 'Insurance fee',
    redeemLHT: 'Redeem LHT',
  },
  operations: {
    emptyCompletedList: 'No completed operations.',
    desc: 'Description',
    adminCount: 'Number of CBE',
    signs: 'Signatures remained',
    revoke: 'Revoke',
    completed: 'Completed operations',
    errors: {
      duplicate: 'This transaction already added to the list of operations needed multi-signatures.',
      requiredSigns: 'The amount of signatures required should not exceed CBE count.',
    },
    requiredSigns: 'Required signatures',
    sign: 'Sign',
    settings: 'Operations settings',
    emptyPendingList: 'No pending operations.',
  },
  exchange: {
    buyPrice: 'Buy price',
    sellPrice: 'Sell price',
    rates: 'Exchange rates',
    tokens: 'Exchange tokens',
    limits: 'Exchange limits',
    exchange: 'Exchange',
  },
  LoginPage: {
    title: 'Login',
    subTitle: 'Welcome back!',
  },
  ProviderSelector: {
    provider: 'Provider',
  },
}
